diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..2088169
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,76 @@
+load("@bazel_skylib//lib:selects.bzl", "selects")
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+BOOST_LOCALE_COMMON_SOURCES = glob(
+    [
+        "src/boost/locale/encoding/*.cpp",
+        "src/boost/locale/encoding/*.hpp",
+        "src/boost/locale/encoding/*.ipp",
+        "src/boost/locale/shared/*.cpp",
+        "src/boost/locale/shared/*.hpp",
+        "src/boost/locale/std/*.cpp",
+        "src/boost/locale/std/*.hpp",
+        "src/boost/locale/util/*.cpp",
+        "src/boost/locale/util/*.hpp",
+    ],
+    exclude = [
+        "src/boost/locale/util/iconv.hpp",
+    ],
+)
+
+BOOST_LOCALE_STD_SOURCES = BOOST_LOCALE_COMMON_SOURCES + [
+    "src/boost/locale/util/iconv.hpp",
+]
+
+BOOST_LOCALE_POSIX_SOURCES = BOOST_LOCALE_COMMON_SOURCES + [
+    "src/boost/locale/util/iconv.hpp",
+] + glob([
+    "src/boost/locale/posix/*.cpp",
+    "src/boost/locale/posix/*.hpp",
+])
+
+BOOST_LOCALE_WIN32_SOURCES = BOOST_LOCALE_COMMON_SOURCES + glob([
+    "src/boost/locale/win32/*.cpp",
+    "src/boost/locale/win32/*.hpp",
+])
+
+BOST_LOCALE_STD_COPTS = [
+    "-DBOOST_LOCALE_NO_POSIX_BACKEND=1",
+    "-DBOOST_LOCALE_NO_WINAPI_BACKEND",
+    "-DBOOST_LOCALE_WITH_ICONV",
+]
+
+BOOST_LOCALE_POSIX_COPTS = [
+    "-DBOOST_LOCALE_WITH_ICONV",
+    "-DBOOST_LOCALE_NO_WINAPI_BACKEND",
+]
+
+BOOST_LOCALE_WIN32_COPTS = [
+    "-DBOOST_LOCALE_NO_POSIX_BACKEND",
+]
+
+boost_library(
+    name = "locale",
+    srcs = selects.with_or({
+        "@platforms//os:android": BOOST_LOCALE_STD_SOURCES,
+        ("@platforms//os:linux", "@platforms//os:osx", "@platforms//os:ios", "@platforms//os:watchos", "@platforms//os:tvos"): BOOST_LOCALE_POSIX_SOURCES,
+        "@boost.rules.tools//:windows_x86_64": BOOST_LOCALE_WIN32_SOURCES,
+    }),
+    copts = selects.with_or({
+        "@platforms//os:android": BOST_LOCALE_STD_COPTS,
+        ("@platforms//os:linux", "@platforms//os:osx", "@platforms//os:ios", "@platforms//os:watchos", "@platforms//os:tvos"): BOOST_LOCALE_POSIX_COPTS,
+        "@boost.rules.tools//:windows_x86_64": BOOST_LOCALE_WIN32_COPTS,
+    }),
+    includes = ["src/"],
+    deps = [
+        "@boost//:assert",
+        "@boost//:config",
+        "@boost//:core",
+        "@boost//:iterator",
+        "@boost//:predef",
+        "@boost//:thread",
+        "@boost//:utility",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..927ebbb
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,22 @@
+"""
+Hey there! Before editing, check out the tool at https://github.com/dynacondev/boost.rules.tools
+Note: These modules follow a circular dependency structure on the boost module https://github.com/dynacondev/boost.rules to keep boost releases from mixing!
+"""
+
+module(
+    name = "boost.locale",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+bazel_dep(name = "bazel_skylib", version = "1.5.0")
+
+
+
+
+
+
+
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/test/BUILD.bazel b/test/BUILD.bazel
new file mode 100644
index 0000000..8bf79d5
--- /dev/null
+++ b/test/BUILD.bazel
@@ -0,0 +1,12 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        negative_test_names = [],
+        deps = DEPS,
+    ),
+)
