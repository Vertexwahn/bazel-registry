diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..bf67674
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,50 @@
+load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+bool_flag(
+    name = "beast_use_std_string_view",
+    build_setting_default = False,
+)
+
+config_setting(
+    name = "beast_std_string_view",
+    flag_values = {
+        ":beast_use_std_string_view": "True",
+    },
+)
+
+boost_library(
+    name = "beast",
+    srcs = [
+        "build_beast.cpp",
+    ],
+    defines = [
+        "BOOST_BEAST_SEPARATE_COMPILATION",
+    ] + select({
+        ":beast_std_string_view": ["BOOST_BEAST_USE_STD_STRING_VIEW"],
+        "//conditions:default": [],
+    }),
+    deps = [
+        "@boost//:asio",
+        "@boost//:assert",
+        "@boost//:config",
+        "@boost//:core",
+        "@boost//:detail",
+        "@boost//:endian",
+        "@boost//:intrusive",
+        "@boost//:bind",
+        "@boost//:mp11",
+        "@boost//:optional",
+        "@boost//:preprocessor",
+        "@boost//:smart_ptr",
+        "@boost//:static_assert",
+        "@boost//:static_string",
+        "@boost//:system",
+        "@boost//:throw_exception",
+        "@boost//:tribool",
+        "@boost//:type_traits",
+        "@boost//:utility",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..cefb109
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,36 @@
+"""
+Hey there! Before editing, check out the tool at https://github.com/dynacondev/boost.rules.tools
+Note: These modules follow a circular dependency structure on the boost module https://github.com/dynacondev/boost.rules to keep boost releases from mixing!
+"""
+
+module(
+    name = "boost.beast",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+bazel_dep(name = "bazel_skylib", version = "1.5.0")
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/build_beast.cpp b/build_beast.cpp
new file mode 100644
index 0000000..11ef613
--- /dev/null
+++ b/build_beast.cpp
@@ -0,0 +1,2 @@
+// https://www.boost.org/doc/libs/1_77_0/libs/beast/doc/html/beast/config/configuration_preprocessor_defin.html
+#include "boost/beast/src.hpp"
diff --git a/test/BUILD.bazel b/test/BUILD.bazel
new file mode 100644
index 0000000..d7683db
--- /dev/null
+++ b/test/BUILD.bazel
@@ -0,0 +1,180 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost//:beast",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+                srcs = glob([
+                    "**/*.h",
+                    "**/*.ipp",
+                ]),
+                names = [
+                    "beast/_experimental/_test_detail_stream_state",
+                    "beast/_experimental/icy_stream",
+                    "beast/_experimental/stream",
+                    "beast/core/_detail_base64",
+                    "beast/core/_detail_bind_continuation",
+                    "beast/core/_detail_buffer",
+                    "beast/core/_detail_clamp",
+                    "beast/core/_detail_get_io_context",
+                    "beast/core/_detail_is_invocable",
+                    "beast/core/_detail_read",
+                    "beast/core/_detail_sha1",
+                    "beast/core/_detail_static_const",
+                    "beast/core/_detail_tuple",
+                    "beast/core/_detail_variant",
+                    "beast/core/_detail_varint",
+                    "beast/core/async_base",
+                    "beast/core/basic_stream",
+                    "beast/core/bind_handler",
+                    "beast/core/buffer_ref",
+                    "beast/core/buffer_traits",
+                    "beast/core/buffered_read_stream",
+                    "beast/core/buffers_adaptor",
+                    "beast/core/buffers_cat",
+                    "beast/core/buffers_generator",
+                    "beast/core/buffers_prefix",
+                    "beast/core/buffers_range",
+                    "beast/core/buffers_suffix",
+                    "beast/core/buffers_to_string",
+                    "beast/core/close_socket",
+                    "beast/core/detect_ssl",
+                    "beast/core/file_base",
+                    "beast/core/file_posix",
+                    "beast/core/file_stdio",
+                    "beast/core/file_win32",
+                    "beast/core/file",
+                    "beast/core/filtering_cancellation_slot",
+                    "beast/core/flat_buffer",
+                    "beast/core/flat_static_buffer",
+                    "beast/core/flat_stream",
+                    "beast/core/make_printable",
+                    "beast/core/make_strand",
+                    "beast/core/multi_buffer",
+                    "beast/core/ostream",
+                    "beast/core/prepare_buffers",
+                    "beast/core/rate_policy",
+                    "beast/core/read_size",
+                    "beast/core/role",
+                    "beast/core/saved_handler",
+                    "beast/core/span",
+                    "beast/core/static_buffer",
+                    "beast/core/static_string",
+                    "beast/core/stream_traits",
+                    "beast/core/string",
+                    "beast/core/tcp_stream",
+                    "beast/core/zlib",
+                    "beast/http/chunk_encode",
+                    "beast/http/any_completion_handler",
+                    "beast/http/basic_dynamic_body",
+                    "beast/http/basic_file_body",
+                    "beast/http/basic_parser",
+                    "beast/http/buffer_body",
+                    "beast/http/dynamic_body",
+                    "beast/http/empty_body",
+                    "beast/http/field_compiles",
+                    "beast/http/field",
+                    "beast/http/fields",
+                    "beast/http/file_body",
+                    "beast/http/message_generator",
+                    "beast/http/message",
+                    "beast/http/parser",
+                    "beast/http/read",
+                    "beast/http/rfc7230",
+                    "beast/http/serializer",
+                    "beast/http/span_body",
+                    "beast/http/status",
+                    "beast/http/string_body",
+                    "beast/http/type_traits",
+                    "beast/http/vector_body",
+                    "beast/http/verb",
+                    "beast/http/write",
+                    "beast/ssl/ssl_stream",
+                    "beast/websocket/doc_snippets",
+                    "beast/websocket/_detail_decorator",
+                    "beast/websocket/_detail_impl_base",
+                    "beast/websocket/_detail_prng",
+                    "beast/websocket/accept",
+                    "beast/websocket/any_completion_handler",
+                    "beast/websocket/cancel",
+                    "beast/websocket/close",
+                    "beast/websocket/frame",
+                    "beast/websocket/handshake",
+                    "beast/websocket/option",
+                    "beast/websocket/ping",
+                    "beast/websocket/read1",
+                    "beast/websocket/read2",
+                    "beast/websocket/read3",
+                    "beast/websocket/rfc6455",
+                    "beast/websocket/ssl",
+                    "beast/websocket/stream_base",
+                    "beast/websocket/stream_explicit",
+                    "beast/websocket/stream_fwd",
+                    "beast/websocket/stream",
+                    "beast/websocket/teardown",
+                    "beast/websocket/timer",
+                    "beast/websocket/utf8_checker",
+                    "beast/websocket/write",
+                    "beast/zlib/zlib",
+                    "beast/zlib/inflate_stream",
+                    "beast/zlib/deflate_stream",
+                    "beast/core",
+                    "beast/http",
+                    "beast/ssl",
+                    "beast/version",
+                    "beast/websocket",
+                    "beast/zlib",
+                    "bench/buffers/bench_buffers",
+                    "bench/parser/bench_parser",
+                    "bench/parser/nodejs_parser",
+                    "bench/utf8_checker/bench_utf8_checker",
+                    "bench/wsload/wsload",
+                    "bench/zlib/deflate_stream",
+                    "bench/zlib/inflate_stream",
+                    "doc/core_1_refresher",
+                    "doc/core_3_timeouts",
+                    "doc/core_4_layers",
+                    "doc/core_snippets",
+                    "doc/exemplars",
+                    "doc/http_10_custom_parser",
+                    "doc/http_examples",
+                    "doc/http_snippets",
+                    "doc/websocket_1_connecting",
+                    "doc/websocket_2_handshaking",
+                    "doc/websocket_3_decorator",
+                    "doc/websocket_4_messages",
+                    "doc/websocket_5_control_frames",
+                    "doc/websocket_6_timeouts",
+                    "doc/websocket_7_teardown",
+                    "doc/websocket_8_notes",
+                    "doc/websocket",
+                    "example/common/root_certificates",
+                    "example/common/server_certificate",
+                    "lib_asio_ssl",
+                    "lib_asio",
+                    "lib_beast",
+                    "lib_test",
+                ],
+                deps = DEPS,
+            ) + boost_test_set(
+                file_extensions = ".c",
+                names = [
+                    "bench/parser/nodejs-parser/http_parser",
+                ],
+                deps = DEPS,
+            ) +
+            boost_test_set(
+                expect_fail = True,
+                names = [
+                    "beast/_experimental/error",
+                    "beast/zlib/error",
+                    "beast/core/error",
+                    "beast/http/error",
+                    "beast/websocket/error",
+                ],
+                deps = DEPS,
+            ),
+)
