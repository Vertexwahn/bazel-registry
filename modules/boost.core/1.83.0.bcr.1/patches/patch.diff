diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..f32a5c8
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,13 @@
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "core",
+    deps = [
+        "@boost//:assert",
+        "@boost//:config",
+        "@boost//:static_assert",
+        "@boost//:throw_exception",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..4a7345a
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,17 @@
+"""
+Hey there! Before editing, check out the tool at https://github.com/dynacondev/boost.rules.tools
+Note: These modules follow a circular dependency structure on the boost module https://github.com/dynacondev/boost.rules to keep boost releases from mixing!
+"""
+
+module(
+    name = "boost.core",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+
+# Needed for tests - :archive target
+bazel_dep(name = "boost.serialization", version = "1.83.0.bcr.1")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/test/BUILD.bazel b/test/BUILD.bazel
new file mode 100644
index 0000000..95f0faa
--- /dev/null
+++ b/test/BUILD.bazel
@@ -0,0 +1,64 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost//:core",
+    "@boost//:move",
+    "@boost//:type_traits",
+    "@boost//:utility",
+    "@boost.serialization//:archive",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        negative_test_names = [
+            "swap/swap_const_wrapper_fail",
+            "addressof_fail_rvalue",
+            "bit_width_fail",
+            "checked_delete_fail",
+            "checked_delete_fail2",
+            "explicit_operator_bool_compile_fail_conv_int",
+            "explicit_operator_bool_compile_fail_conv_pvoid",
+            "explicit_operator_bool_compile_fail_delete",
+            "explicit_operator_bool_compile_fail_shift",
+            "lightweight_test_all_with_fail",
+            "lightweight_test_fail",
+            "lightweight_test_fail2",
+            "lightweight_test_fail3",
+            "lightweight_test_fail4",
+            "lightweight_test_fail5",
+            "lightweight_test_fail6",
+            "lightweight_test_fail7",
+            "lightweight_test_fail8",
+            "lightweight_test_fail9",
+            "lightweight_test_fail10",
+            "lightweight_test_fail11",
+            "lightweight_test_fail12",
+            "lightweight_test_fail13",
+            "lightweight_test_fail14",
+            "lightweight_test_fail15",
+            "lightweight_test_fail16",
+            "lightweight_test_ge_fail",
+            "lightweight_test_gt_fail",
+            "lightweight_test_le_fail",
+            "lightweight_test_lt_fail",
+            "lightweight_test_with_fail",
+            "noncopyable_compile_fail",
+            "quick_exit_fail",
+            "ref_implicit_fail",
+            "ref_implicit_fail2",
+            "ref_implicit_fail3",
+            "ref_implicit_fail4",
+            "ref_rv_fail1",
+            "ref_rv_fail2",
+            "ref_rv_fail3",
+            "ref_rv_fail4",
+            "ref_rv_fail5",
+            "scoped_enum_compile_fail_conv_from_int",
+            "scoped_enum_compile_fail_conv_to_int",
+            "sv_nullptr_fail",
+            "verbose_terminate_handler_fail",
+        ],
+        deps = DEPS,
+    ),
+)
