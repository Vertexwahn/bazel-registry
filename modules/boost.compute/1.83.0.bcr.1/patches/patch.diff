diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..f3c2b97
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,47 @@
+load("@bazel_skylib//lib:selects.bzl", "selects")
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "compute",
+    linkopts = selects.with_or({
+        # OpenCL (required for Boost.Compute) is deprecated on macOS and not supported on other Apple OSs.
+        # This will at least produce the right error message, indicating that OpenCL is not present
+        ("@platforms//os:osx", "@platforms//os:ios", "@platforms//os:watchos", "@platforms//os:tvos"): [
+            "-framework OpenCL",
+        ],
+        "//conditions:default": [
+            "-lOpenCL",
+        ],
+    }),
+    deps = [
+        "@boost//:algorithm",
+        "@boost//:array",
+        "@boost//:assert",
+        "@boost//:chrono",
+        "@boost//:config",
+        "@boost//:core",
+        "@boost//:filesystem",
+        "@boost//:function",
+        "@boost//:function_types",
+        "@boost//:fusion",
+        "@boost//:iterator",
+        "@boost//:lexical_cast",
+        "@boost//:mpl",
+        "@boost//:optional",
+        "@boost//:preprocessor",
+        "@boost//:property_tree",
+        "@boost//:proto",
+        "@boost//:range",
+        "@boost//:smart_ptr",
+        "@boost//:static_assert",
+        "@boost//:thread",
+        "@boost//:throw_exception",
+        "@boost//:tuple",
+        "@boost//:type_traits",
+        "@boost//:typeof",
+        "@boost//:utility",
+        "@boost//:uuid",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..e9f50c8
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,42 @@
+"""
+Hey there! Before editing, check out the tool at https://github.com/dynacondev/boost.rules.tools
+Note: These modules follow a circular dependency structure on the boost module https://github.com/dynacondev/boost.rules to keep boost releases from mixing!
+"""
+
+module(
+    name = "boost.compute",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+bazel_dep(name = "bazel_skylib", version = "1.5.0")
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/test/BUILD.bazel b/test/BUILD.bazel
new file mode 100644
index 0000000..fb3de39
--- /dev/null
+++ b/test/BUILD.bazel
@@ -0,0 +1,171 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost//:compute",
+    "@boost//:test",
+    "@boost//:accumulators",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        data = glob(["data/*"]),
+        names = [
+            "check/has_opencl",
+            "extra/test_interop_eigen",
+            "extra/test_interop_opencv",
+            "extra/test_interop_opengl",
+            "extra/test_interop_qt",
+            "extra/test_interop_vtk",
+            "extra/test_multiple_objects1",
+            "extra/test_multiple_objects2",
+            "test_accumulate",
+            "test_adjacent_difference",
+            "test_adjacent_find",
+            "test_amd_cpp_kernel_language",
+            "test_any_all_none_of",
+            "test_array",
+            "test_async_wait_guard",
+            "test_async_wait",
+            "test_bernoulli_distribution",
+            "test_binary_search",
+            "test_buffer_allocator",
+            "test_buffer_iterator",
+            "test_buffer",
+            "test_clamp_range",
+            "test_closure",
+            "test_command_queue",
+            "test_complex",
+            "test_constant_iterator",
+            "test_context_error",
+            "test_context",
+            "test_copy_if",
+            "test_copy_type_mismatch",
+            "test_copy",
+            "test_count",
+            "test_counting_iterator",
+            "test_device",
+            "test_discard_iterator",
+            "test_discrete_distribution",
+            "test_dynamic_bitset",
+            "test_equal_range",
+            "test_equal",
+            "test_event",
+            "test_extents",
+            "test_extrema",
+            "test_fill",
+            "test_find_end",
+            "test_find",
+            "test_flat_map",
+            "test_flat_set",
+            "test_for_each",
+            "test_function_input_iterator",
+            "test_function",
+            "test_functional_as",
+            "test_functional_bind",
+            "test_functional_convert",
+            "test_functional_get",
+            "test_functional_hash",
+            "test_functional_identity",
+            "test_functional_popcount",
+            "test_functional_unpack",
+            "test_gather",
+            "test_generate",
+            "test_image_sampler",
+            "test_image1d",
+            "test_image2d",
+            "test_image3d",
+            "test_includes",
+            "test_inner_product",
+            "test_inplace_merge",
+            "test_inplace_reduce",
+            "test_insertion_sort",
+            "test_invoke",
+            "test_iota",
+            "test_is_permutation",
+            "test_is_sorted",
+            "test_kernel",
+            "test_lambda",
+            "test_lexicographical_compare",
+            "test_linear_congruential_engine",
+            "test_literal_conversion",
+            "test_local_buffer",
+            "test_malloc",
+            "test_mapped_view",
+            "test_merge_sort_gpu",
+            "test_merge",
+            "test_mersenne_twister_engine",
+            "test_mismatch",
+            "test_next_permutation",
+            "test_no_device_found",
+            "test_normal_distribution",
+            "test_nth_element",
+            "test_opencl_error",
+            "test_pair",
+            "test_partial_sum",
+            "test_partition_point",
+            "test_partition",
+            "test_permutation_iterator",
+            "test_pinned_allocator",
+            "test_pipe",
+            "test_platform",
+            "test_prev_permutation",
+            "test_program_cache",
+            "test_program",
+            "test_radix_sort_by_key",
+            "test_radix_sort",
+            "test_random_fill",
+            "test_random_shuffle",
+            "test_reduce_by_key",
+            "test_reduce",
+            "test_remove",
+            "test_replace",
+            "test_result_of",
+            "test_reverse",
+            "test_rotate_copy",
+            "test_rotate",
+            "test_scan",
+            "test_scatter_if",
+            "test_scatter",
+            "test_search_n",
+            "test_search",
+            "test_set_difference",
+            "test_set_intersection",
+            "test_set_symmetric_difference",
+            "test_set_union",
+            "test_sort_by_key",
+            "test_sort_by_transform",
+            "test_sort",
+            "test_stable_partition",
+            "test_stable_sort_by_key",
+            "test_stable_sort",
+            "test_stack",
+            "test_strided_iterator",
+            "test_string",
+            "test_struct",
+            "test_svm_ptr",
+            "test_system",
+            "test_tabulate",
+            "test_threefry_engine",
+            "test_transform_if",
+            "test_transform_iterator",
+            "test_transform_reduce",
+            "test_transform",
+            "test_tuple",
+            "test_type_traits",
+            "test_types",
+            "test_uniform_int_distribution",
+            "test_uniform_real_distribution",
+            "test_unique_copy",
+            "test_unique",
+            "test_unsupported_extension",
+            "test_user_defined_types",
+            "test_user_event",
+            "test_valarray",
+            "test_vector",
+            "test_wait_list",
+            "test_zip_iterator",
+        ],
+        deps = DEPS,
+    ),
+)
