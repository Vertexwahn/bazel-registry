diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..4524777
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,71 @@
+load("@bazel_skylib//lib:selects.bzl", "selects")
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "thread",
+    srcs = selects.with_or({
+        ("@platforms//os:linux", "@platforms//os:android", "@platforms//os:osx", "@platforms//os:ios", "@platforms//os:watchos", "@platforms//os:tvos"): [
+            "src/pthread/once.cpp",
+            "src/pthread/thread.cpp",
+        ],
+        "@boost.rules.tools//:windows_x86_64": [
+            "src/win32/thread.cpp",
+            "src/win32/tss_dll.cpp",
+            "src/win32/tss_pe.cpp",
+        ],
+    }),
+    hdrs = selects.with_or({
+        ("@platforms//os:linux", "@platforms//os:android", "@platforms//os:osx", "@platforms//os:ios", "@platforms//os:watchos", "@platforms//os:tvos"): [
+            "src/pthread/once_atomic.cpp",
+        ],
+        "@boost.rules.tools//:windows_x86_64": [],
+    }),
+    linkopts = selects.with_or({
+        ("@platforms//os:linux", "@platforms//os:osx", "@platforms//os:ios", "@platforms//os:watchos", "@platforms//os:tvos"): ["-lpthread"],
+        "@boost.rules.tools//:windows_x86_64": [],
+        "@platforms//os:android": [],
+    }),
+    local_defines = selects.with_or({
+        ("@platforms//os:linux", "@platforms//os:osx", "@platforms//os:ios", "@platforms//os:watchos", "@platforms//os:tvos"): [],
+        "@boost.rules.tools//:windows_x86_64": [
+            "BOOST_ALL_NO_LIB",
+            "BOOST_THREAD_BUILD_LIB",
+            "BOOST_THREAD_USE_LIB",
+            "BOOST_WIN32_THREAD",
+        ],
+        "//conditions:default": [],
+    }),
+    deps = [
+        "@boost//:algorithm",
+        "@boost//:assert",
+        "@boost//:atomic",
+        "@boost//:bind",
+        "@boost//:chrono",
+        "@boost//:concept_check",
+        "@boost//:config",
+        "@boost//:container",
+        "@boost//:container_hash",
+        "@boost//:core",
+        "@boost//:date_time",
+        "@boost//:exception",
+        "@boost//:function",
+        "@boost//:intrusive",
+        "@boost//:io",
+        "@boost//:iterator",
+        "@boost//:lexical_cast",
+        "@boost//:move",
+        "@boost//:optional",
+        "@boost//:predef",
+        "@boost//:preprocessor",
+        "@boost//:smart_ptr",
+        "@boost//:static_assert",
+        "@boost//:system",
+        "@boost//:throw_exception",
+        "@boost//:tuple",
+        "@boost//:type_traits",
+        "@boost//:utility",
+        "@boost//:winapi",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..ca039a3
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,44 @@
+"""
+Hey there! Before editing, check out the tool at https://github.com/dynacondev/boost.rules.tools
+Note: These modules follow a circular dependency structure on the boost module https://github.com/dynacondev/boost.rules to keep boost releases from mixing!
+"""
+
+module(
+    name = "boost.thread",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+bazel_dep(name = "bazel_skylib", version = "1.5.0")
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/test/BUILD.bazel b/test/BUILD.bazel
new file mode 100644
index 0000000..8bf79d5
--- /dev/null
+++ b/test/BUILD.bazel
@@ -0,0 +1,12 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        negative_test_names = [],
+        deps = DEPS,
+    ),
+)
